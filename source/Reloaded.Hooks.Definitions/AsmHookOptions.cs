using Reloaded.Hooks.Definitions.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Reloaded.Hooks.Definitions
{
    /// <summary>
    /// Defines common options which can be used for assembly hooks.
    /// </summary>
    public class AsmHookOptions
    {
        /// <summary>
        /// Tries to use a relative jump e.g. "jmp 0x123456" instead of absolute (pointer based)
        /// jump "jmp [0x123456]" when possible at the beginning of the hooked function. This is sometimes
        /// useful when patching over a function and you believe the built in function patcher
        /// is not picking up the return address.
        /// </summary>
        public bool PreferRelativeJump { get; set; } = false;

        /// <summary>
        /// Defines what should be done with the original code that was replaced with the JMP instruction.
        /// </summary>
        public AsmHookBehaviour Behaviour { get; set; } = AsmHookBehaviour.ExecuteFirst;

        /// <summary>
        /// Optional explicit length of hook.
        /// Use only in rare cases where auto-length check overflows a jmp/call opcode.
        /// Default is -1 (Automatic).
        /// See <see cref="MaxOpcodeSize"/> which defines the minimum autogenerated hook length.
        /// </summary>
        public int hookLength { get; set; } = -1;

        /// <summary>
        /// Maximum size of the jmp opcode generated to the stub function.
        /// This is the minimum bytes overwritten at the point where the hook you are making is being made.
        /// Default value is 7 (for backwards compatibility).
        /// If <see cref="PreferRelativeJump"/> is false, use a value of 6.
        /// If <see cref="PreferRelativeJump"/> is true, you can use a value of 5.
        /// </summary>
        public int MaxOpcodeSize { get; set; } = 7;
    }
}
