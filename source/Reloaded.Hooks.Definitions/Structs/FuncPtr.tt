<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>


<# 
    string[] templates = 
    { 
        "TReturn", 
        "T1, TReturn", 
        "T1, T2, TReturn", 
        "T1, T2, T3, TReturn",
        "T1, T2, T3, T4, TReturn",
        "T1, T2, T3, T4, T5, TReturn",
        "T1, T2, T3, T4, T5, T6, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, TReturn",  
        "T1, T2, T3, T4, T5, T6, T7, T8, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn",   
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, TReturn",
        "T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, TReturn",
    };

    string[] conventions = 
    { 
        "Cdecl", 
        "Stdcall", 
        "Thiscall"
    };
#>

using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;

namespace Reloaded.Hooks.Definitions.Structs
{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable RS0016 // Not part of the declared API.
<#
foreach (var template in templates)
{
#>
    [ExcludeFromCodeCoverage]
    public unsafe struct FuncPtr<<#= template #>> : IFuncPtr
    {
        /// <summary>
        /// Raw pointer to the function.
        /// </summary>
        public void* funcPtr;

    
        /// <summary>
        /// Calls the underlying function using the Stdcall convention.
        /// </summary>
        public delegate*unmanaged[Stdcall]<<#= template #>> Invoke => (delegate*unmanaged[Stdcall]<<#= template #>>)funcPtr;

        #if NET6_0_OR_GREATER
        /// <summary>
        /// Calls the underlying function using the Stdcall convention using the SuppressGCTransition attribute.
        /// Please read: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.suppressgctransitionattribute
        /// </summary>
        public delegate*unmanaged[Stdcall, SuppressGCTransition]<<#= template #>> InvokeDangerous => (delegate*unmanaged[Stdcall, SuppressGCTransition]<<#= template #>>)funcPtr;
        #endif

<#
    foreach (var convention in conventions)
	{ 
#>
        /// <summary>
        /// Calls the underlying function using the <#= convention #> convention.
        /// </summary>
        public delegate*unmanaged[<#= convention #>]<<#= template #>> InvokeAs<#= convention #> => (delegate*unmanaged[<#= convention #>]<<#= template #>>)funcPtr;
        
        #if NET6_0_OR_GREATER
        /// <summary>
        /// Calls the underlying function using the <#= convention #> convention using the SuppressGCTransition attribute.
        /// Please read: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.suppressgctransitionattribute
        /// </summary>
        public delegate*unmanaged[<#= convention #>, SuppressGCTransition]<<#= template #>> InvokeAs<#= convention #>Dangerous => (delegate*unmanaged[<#= convention #>, SuppressGCTransition]<<#= template #>>)funcPtr;
        #endif

<#
    } 
#>
        public FuncPtr(void* ptr) { funcPtr = ptr; }
<#
    foreach (var convention in conventions)
	{ 
#>
        public FuncPtr(delegate*unmanaged[<#= convention #>]<<#= template #>> ptr) { funcPtr = ptr; }
        #if NET6_0_OR_GREATER
        public FuncPtr(delegate*unmanaged[<#= convention #>, SuppressGCTransition]<<#= template #>> ptr) { funcPtr = ptr; }
        #endif
<#
    } 
#>

        public static explicit operator void*(FuncPtr<<#= template #>> func) => func.funcPtr;
        public static implicit operator FuncPtr<<#= template #>>(void* ptr) => new FuncPtr<<#= template #>>(ptr);
        public static implicit operator FuncPtr<<#= template #>>(IntPtr ptr) => new FuncPtr<<#= template #>>((void*)ptr);
<#
    foreach (var convention in conventions)
	{ 
#>
        public static implicit operator FuncPtr<<#= template #>>(delegate*unmanaged[<#= convention #>]<<#= template #>> ptr) => new FuncPtr<<#= template #>>(ptr);

        #if NET6_0_OR_GREATER
        public static implicit operator FuncPtr<<#= template #>>(delegate*unmanaged[<#= convention #>, SuppressGCTransition]<<#= template #>> ptr) => new FuncPtr<<#= template #>>(ptr);
        #endif
<#
    } 
#>

        /// <inheritdoc />
        public int NumberOfParameters => FuncPtr.GetNumberOfParameters(typeof(FuncPtr<<#= template #>>));

        /// <inheritdoc />
        public int NumberOfParametersWithoutFloats => FuncPtr.GetNumberOfParametersWithoutFloats(typeof(FuncPtr<<#= template #>>));
    }

<#
} 
#>
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
#pragma warning restore RS0016 // Not part of the declared API.
}